import telebot
import config
from DataBase import *
from Functions import *
from keyboards import *
from datetime import datetime 

bot = telebot.TeleBot(config.TG_API_TOKEN, parse_mode='HTML')
url = config.URL
@bot.message_handler(commands=["admin_test"])
def test(message): 
        print(bot.get_chat(message.chat.id))


@bot.message_handler(commands=["start"])
def send_welcome(message): 
    user_id = message.from_user.id
    if user_id not in select_users_tgId():
        # bot.send_message(message.chat.id, f"{message.chat.id}" , reply_markup=keyboard1)
        user_name = create_user_name(message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–î–°!", reply_markup=keyboard_commands if message.chat.id > 0 else keyboard_commands_chat)
        add_user(user_id, user_name)
    else:
        if message.chat.id > 0:
            bot.send_message(message.chat.id, f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, {message.from_user.first_name}!", reply_markup=keyboard_commands)
        else:
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyboard_commands_chat)


@bot.message_handler(commands=["schedule"])
def send_schedule_simple(message):
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è             –î–û–ë–ê–í–ò–¢–¨ –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê –õ–ò–ß–ö–£ –ò –ß–ê–¢
        command, *args = message.text.split()
        if len(args) < 1:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('week', message.chat.id))
            return
        else: 
            group_name = args[0].upper()  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            today_only = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if len(args) > 1 and args[1].lower() == "today":
                today_only = True
            
            group_id = select_group_by_name(group_name)['id']
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_text = get_schedule(url, group_id, -1, today_only)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, schedule_text)

def send_my_schedule(message, today_only=False):
    user_tgId = message.from_user.id
    if message.chat.id > 0:  # –¢–æ–ª—å–∫–æ –≤ –õ–°
        user_data = select_user(user_tgId)
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard_commands)
            return

        user_id = user_data['id']
        user_unions = select_user_unions(user_id)

        if not user_unions:
            bot.send_message(message.chat.id, "üì≠ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏.")
            return

        all_schedules = []
        days_of_week = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê", "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]
        current_day = days_of_week[datetime.now().weekday()]

        for u in user_unions:
            union_groups = select_union_groups(u['union_id'])
            for g in union_groups:
                group_name = select_group(g)['name']

                try:
                    schedule_data = get_schedule(url, g, -1, today_only=today_only)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    if schedule_data.startswith("–û—à–∏–±–∫–∞") or schedule_data.startswith("–ì—Ä—É–ø–ø–∞"):
                        continue

                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    lines = schedule_data.split('\n')
                    filtered_lines = [line for line in lines if not line.startswith("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã")]
                    all_schedules.append(f"<b>üìò –ì—Ä—É–ø–ø–∞:</b> {group_name}")
                    all_schedules.extend(filtered_lines)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}: {e}")

        if not all_schedules:
            bot.send_message(message.chat.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")
            return

        result_text = "\n".join(all_schedules)
        bot.send_message(message.chat.id, result_text, reply_markup=keyboard_commands)
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

@bot.message_handler(commands=["profile"])
def profile_message(message):
    bot.delete_message(message.chat.id, message.message_id)
    if message.chat.id < 0:
        bot.send_message(message.chat.id, create_profile_message(message.chat.id), reply_markup=keyboard_profile_chat)
    else:
        bot.send_message(message.chat.id, create_profile_message(message.chat.id), reply_markup=keyboard_profile)

@bot.message_handler(commands=["union"])
def union_message(message):
    if message.chat.id < 0:
        if message.chat.id not in select_unions_tgId():
            try:
                user_id = message.from_user.id
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 
                if user_id not in select_users_tgId():
                    user_name = create_user_name(message.from_user.first_name, message.from_user.last_name, message.from_user.username)
                    add_user(user_id, user_name)

                union_tgId = message.chat.id
                union_name = bot.get_chat(message.chat.id).title
                union_created_by_id = select_user(message.from_user.id)['id']

                if create_union(union_tgId, union_name, union_created_by_id):
                    add_user_to_union(select_user(user_id)['id'], select_union(message.chat.id)['id'])
                    bot.send_message(message.chat.id, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —á–∞—Ç:", reply_markup=create_keyboard_groups(None, message.chat.id))
            except Exception as e:
                bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã.")
                print(e)
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —á–∞—Ç –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å:", reply_markup=create_keyboard_groups(None, message.chat.id, True))
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

@bot.message_handler(content_types=['new_chat_members'])
def new_member(message):
    if message.new_chat_members[0].id != 7000728406:
        user_name = message.new_chat_members[0].first_name 
        user_id = message.new_chat_members[0].id
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0}!".format(user_name))

        if user_id not in select_users_tgId():
            user_name = create_user_name(message.new_chat_members[0].first_name, message.new_chat_members[0].last_name, message.new_chat_members[0].username)
            add_user(user_id, user_name)

        add_user_to_union(select_user(user_id)['id'], select_union(message.chat.id)['id'])
    else:
        union_message(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("groupId_"))
def create_unionMember(call):
    group_id = call.data.split("_")[1]
    isAdd = True if call.data.split("_")[2] == 'add' else False
    isDelete = True if call.data.split("_")[2] == 'delete' else False

    if isAdd:
        add_union_to_group(select_union(call.message.chat.id)['id'], group_id)
        bot.send_message(call.message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–∞—à —á–∞—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≥—Ä—É–ø–ø–æ–π {select_group(group_id)['name']}")
    elif isDelete:
        delete_union_from_group(select_union(call.message.chat.id)['id'], group_id)
        bot.send_message(call.message.chat.id, f"–í–∞—à —á–∞—Ç –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω –æ—Ç –≥—Ä—É–ø–ø—ã {select_group(group_id)['name']}")

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
def send_schedule(call):
    group_id = call.data.split("_")[1]
    today_only = True if call.data.split("_")[2] == "today" else False
    if call.data.split("_")[3] == "numerator":
        is_numerator = 0
    elif call.data.split("_")[3] == "denominator":
        is_numerator = 1
    else:
        is_numerator = -1

    schedule_text = get_schedule(url, group_id, is_numerator, today_only)
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if is_numerator == -1:
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    bot.send_message(call.message.chat.id, schedule_text, reply_markup=keyboard_numerator(is_numerator, group_id))
    
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("changeMyName_"))
def changeMyName(call):
    isUnion = True if call.data.split("_")[1] == "union" else False
    if not isUnion:
        msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:")
    else:
        msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:")
    bot.register_next_step_handler(msg, lambda m: changeMyName_secondStep(m, isUnion))

def changeMyName_secondStep(message, isUnion = False):
    newName = message.text
    if not isUnion:
        update_user(message.chat.id, newName)
        bot.send_message(message.chat.id, f"–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <i>{newName}</i>")
    else:
        update_union(message.chat.id, newName)
        bot.set_chat_title(message.chat.id, title=newName)
        bot.send_message(message.chat.id, f"–ò–º—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <i>{newName}</i>")



def new_homework(message):
    if message.chat.id > 0:
        bot.reply_to(message, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
    else:
        user_tgId = message.from_user.id
        if user_tgId not in select_users_tgId():
            bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        # elif select_user(user_tgId)['id'] not in select_union_users(message.chat.id):
        #     print(select_user(user_tgId)['id'], select_union_users(message.chat.id))
        #     bot.reply_to(message, "–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>‚ûï –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–Ω—è</i>")
        else:
            union_id = select_union(message.chat.id)['id']
            groupNames = []
            for g in select_union_groups(union_id):
                groupNames.append(select_group(g)['name'])
            msg = bot.send_message(message.chat.id, "üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.\n\n‚îú -\n‚îú –°–¥–∞—Ç—å –¥–æ: -\n‚îî –û–ø–∏—Å–∞–Ω–∏–µ: -", reply_markup=create_keyboard_subjects(url, groupNames))
            bot.register_next_step_handler(msg, lambda m: new_homework_secondStep(m, homework(select_user(user_tgId)['id'])))

def new_homework_secondStep(message, homework_obj):
    msg = bot.send_message(message.chat.id, f'üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏\n<i>–ü—Ä–∏–º–µ—Ä: 2025-05-19</i>\n\n‚îú {message.text}\n‚îú –°–¥–∞—Ç—å –¥–æ: -\n‚îî –û–ø–∏—Å–∞–Ω–∏–µ: -' )
    bot.register_next_step_handler(msg, lambda m: new_homework_thirdStep(m, homework(homework_obj["user_id"], message.text)))
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)

def new_homework_thirdStep(message, homework_obj):
    is_valid, result = is_valid_date(message.text)
    if not is_valid:
        bot.send_message(message.chat.id, f"‚ùå {result}")
        msg = bot.send_message(message.chat.id, f'üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏\n<i>–ü—Ä–∏–º–µ—Ä: 2025-05-19</i>\n\n‚îú {homework_obj["subject"]}\n‚îú –°–¥–∞—Ç—å –¥–æ: -\n‚îî –û–ø–∏—Å–∞–Ω–∏–µ: -')
        bot.register_next_step_handler(msg, lambda m: new_homework_thirdStep(m, homework_obj))
        return
    
    msg = bot.send_message(message.chat.id, f'üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n‚îú {homework_obj["subject"]}\n‚îú –°–¥–∞—Ç—å –¥–æ: {result}\n‚îî –û–ø–∏—Å–∞–Ω–∏–µ: -')
    bot.register_next_step_handler(msg, lambda m: new_homework_fourthStep(m, homework(homework_obj["user_id"], homework_obj["subject"], result)))
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)

def new_homework_fourthStep(message, homework_obj):
    homework_id = create_homework(homework_obj["user_id"], homework_obj["subject"], homework_obj["due_date"], message.text, select_union(message.chat.id)['id'])
    done_homework = select_homework(homework_id)
    bot.send_message(message.chat.id, f'üìå –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n‚îú {done_homework["subject"]}\n‚îú –°–¥–∞—Ç—å –¥–æ: {done_homework["due_date"]}\n‚îî –û–ø–∏—Å–∞–Ω–∏–µ: {done_homework["description"]}', reply_markup=keyboard_commands_chat)
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id - 1)

def view_homework_menu(message):
    user_tgId = message.from_user.id
    if message.chat.id > 0:  # –¢–æ–ª—å–∫–æ –≤ –õ–°
        user_data = select_user(user_tgId)
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard_commands)
            return
        user_id = user_data['id']
        user_unions = select_user_unions(user_id)

        if not user_unions:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π.", reply_markup=keyboard_commands)
            return

        group_names = set()
        for u in user_unions:
            union_groups = select_union_groups(u['union_id'])
            for g in union_groups:
                group_names.add(select_group(g)['name'])

        if not group_names:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=keyboard_commands)
            return

        keyboard = get_homework_keyboard(sorted(group_names))
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–ó:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, show_homework_by_group_or_all)
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", reply_markup=keyboard_commands_chat)


def show_homework_by_group_or_all(message):
    selected = message.text.strip()
    user_tgId = message.from_user.id
    user_data = select_user(user_tgId)

    if not user_data:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard_commands)
        return

    user_id = user_data['id']

    homeworks = select_homeworks_by_user(user_id)
    if not homeworks:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.", reply_markup=keyboard_commands)
        return

    bot.send_message(message.chat.id, f"üìò –ó–∞–¥–∞–Ω–∏—è ({selected}):")

    if selected == "üìö –í—Å–µ –∑–∞–¥–∞–Ω–∏—è":
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
        homework_by_group = {}

        for hw in homeworks:
            group_list = get_homework_groups(hw['id']) or ['–ë–µ–∑ –≥—Ä—É–ø–ø—ã']
            for group_name in group_list:
                if group_name not in homework_by_group:
                    homework_by_group[group_name] = []
                homework_by_group[group_name].append(hw)

        for group_name, hw_list in homework_by_group.items():
            bot.send_message(message.chat.id, f"<b>üìÅ –ì—Ä—É–ø–ø–∞:</b> {group_name}", reply_markup=keyboard_commands)
            for hw in hw_list:
                is_done = get_homework_status(hw['id'], user_id)
                status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                text = f'''üìå <b>{hw["subject"]}</b>
üìÖ –°–¥–∞—Ç—å –¥–æ: {hw["due_date"].strftime("%d.%m.%Y")}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {hw["description"]}
üìä –°—Ç–∞—Ç—É—Å: {status_text}'''
                bot.send_message(message.chat.id, text, reply_markup=create_keyboard_isDone(hw, is_done))
    else:
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
        found = False
        for hw in homeworks:
            group_list = get_homework_groups(hw['id'])
            if selected in group_list:
                is_done = get_homework_status(hw['id'], user_id)
                status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                text = f'''üìå <b>{hw["subject"]}</b>
üìÖ –°–¥–∞—Ç—å –¥–æ: {hw["due_date"].strftime("%d.%m.%Y")}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {hw["description"]}
üìä –°—Ç–∞—Ç—É—Å: {status_text}'''
                bot.send_message(message.chat.id, text, reply_markup=create_keyboard_isDone(hw, is_done))
                found = True
        if not found:
            bot.send_message(message.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_hw_"))
def toggle_homework_status(call):
    homework_id = int(call.data.split("_")[2])
    user_tgId = call.from_user.id
    user_data = select_user(user_tgId)

    if not user_data:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    user_id = user_data['id']
    is_done = not get_homework_status(homework_id, user_id)
    success = set_homework_status(homework_id, user_id, is_done)

    if not success:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    done_homework = select_homework(homework_id)
    if not done_homework:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    status_button_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" if is_done else "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    updated_text = f'''üìå <b>{done_homework["subject"]}</b>
üìÖ –°–¥–∞—Ç—å –¥–æ: {done_homework["due_date"].strftime("%d.%m.%Y")}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {done_homework["description"]}
üìä –°—Ç–∞—Ç—É—Å: {status_text}'''


    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=updated_text,
        reply_markup=create_keyboard_isDone(done_homework, is_done)
    )

    bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")

@bot.message_handler(commands=["help"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n\nstart - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\nhelp - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–∏–º\nabout - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ",
        reply_markup=keyboard_commands,
    )


@bot.message_handler(commands=["about"])
def send_about(message):
    bot.send_message(message.chat.id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @K0tok")


@bot.message_handler(func=lambda message: True)
def echo_all(message: telebot.types.Message):
    if message.text in ["üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ù–¢–ò", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ù–¢–ò", "üìö"]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('week', message.chat.id ))
    if message.text in ["üóìÔ∏è –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üóìÔ∏è"]:
        send_my_schedule(message, today_only=False)
    if message.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ"]:
        send_my_schedule(message, today_only=True)
    if message.text in ["‚ûï –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–Ω—è", "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–Ω—è", "‚ûï"]:
        union_id = message.chat.id
        if union_id > 0:
            bot.send_message(message.chat.id, f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞ –≥—Ä—É–ø–ø.")
        else:
            user_id = message.from_user.id
            if user_id not in select_union_users(union_id):
                bot.send_message(message.chat.id, f"–í—ã —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã!", reply_markup=keyboard_commands_chat)
            else:
                if user_id not in select_users_tgId():
                    user_name = create_user_name(message.from_user.first_name, message.from_user.last_name, message.from_user.username)
                    add_user(user_id, user_name)
                    add_user_to_union(select_user(user_id)['id'], select_union(union_id)['id'])
                    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–î–°!", reply_markup=keyboard_commands_chat)
                else:
                    add_user_to_union(select_user(user_id)['id'], select_union(union_id)['id'])
                    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard_commands_chat)
    if message.text in ["‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "‚öôÔ∏è"]:
        union_message(message)
    if message.text in ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å –≥—Ä—É–ø–ø—ã", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å –≥—Ä—É–ø–ø—ã", "üë§"]:
        profile_message(message)
    if message.text in ["üìí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –î–ó", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –î–ó", "üìí"]:
        view_homework_menu(message)
    if message.text in ["üìå –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "üìå"]:
        new_homework(message)

bot.infinity_polling()
