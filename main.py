import telebot
import config
from DataBase import *
from Functions import *
from keyboards import *

bot = telebot.TeleBot(config.TG_API_TOKEN, parse_mode='HTML')
url = config.URL
# @bot.message_handler(commands=["admin_test"])
# def test(message): 
#         bot.send_message(message.chat.id, f"\{message.chat.id}")


@bot.message_handler(commands=["start"])
def send_welcome(message): 
    user_id = message.from_user.id
    if user_id not in select_users_tgId():
        # bot.send_message(message.chat.id, f"{message.chat.id}" , reply_markup=keyboard1)
        user_name = create_user_name(message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–î–°!", reply_markup=keyboard_commands)
        add_user(user_id, user_name)
    else:
        if message.chat.id > 0:
            bot.send_message(message.chat.id, f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, {message.from_user.first_name}!", reply_markup=keyboard_commands)
        else:
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É!", reply_markup=keyboard_commands)


@bot.message_handler(commands=["schedule"])
def send_schedule_simple(message):
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è             –î–û–ë–ê–í–ò–¢–¨ –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê –õ–ò–ß–ö–£ –ò –ß–ê–¢
        command, *args = message.text.split()
        if len(args) < 1:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('week', message.chat.id))
            return
        else: 
            group_name = args[0].upper()  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            today_only = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if len(args) > 1 and args[1].lower() == "today":
                today_only = True
            
            group_id = select_group_by_name(group_name)['id']
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_text = get_schedule(url, group_id, -1, today_only)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, schedule_text)

@bot.message_handler(commands=["union"])
def create_union_message(message):
    if message.chat.id < 0:
        if message.chat.id not in select_unions_tgId():
            try:
                union_tgId = message.chat.id
                union_name = bot.get_chat(message.chat.id).title
                union_created_by_id = message.from_user.id
                user_id = message.from_user.id

                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 
                if user_id not in select_users_tgId():
                    user_name = create_user_name(message.from_user.first_name, message.from_user.last_name, message.from_user.username)

                    add_user(user_id, user_name)

                if create_union(union_tgId, union_name, union_created_by_id):
                    add_user_to_union(user_id, message.chat.id)
                    bot.send_message(message.chat.id, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —á–∞—Ç:", reply_markup=create_keyboard_groups(None, message.chat.id))
            except Exception as e:
                bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã.")
                print(e)
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —á–∞—Ç –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å:", reply_markup=create_keyboard_groups(None, message.chat.id))
    else:
        bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

@bot.message_handler(content_types=['new_chat_members'])
def new_member(message):
    if message.new_chat_members[0].id != 7000728406:
        user_name = message.new_chat_members[0].first_name 
        user_id = message.new_chat_members[0].id
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0}!".format(user_name))

        if user_id not in select_users_tgId():
            user_name = create_user_name(message.new_chat_members[0].first_name, message.new_chat_members[0].last_name, message.new_chat_members[0].username)
            add_user(user_id, user_name)

        add_user_to_union(user_id, message.chat.id)
    else:
        create_union_message(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("groupId_"))
def create_unionMember(call):
    group_id = call.data.split("_")[1]
    isAdd = True if call.data.split("_")[2] == 'add' else False
    isDelete = True if call.data.split("_")[2] == 'delete' else False

    if isAdd:
        add_union_to_group(call.message.chat.id, group_id)
        bot.send_message(call.message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–∞—à —á–∞—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≥—Ä—É–ø–ø–æ–π {select_group(group_id)['name']}")
    elif isDelete:
        delete_union_from_group(call.message.chat.id, group_id)
        bot.send_message(call.message.chat.id, f"–í–∞—à —á–∞—Ç –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω –æ—Ç –≥—Ä—É–ø–ø—ã {select_group(group_id)['name']}")

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
def send_schedule(call):
    group_id = call.data.split("_")[1]
    today_only = True if call.data.split("_")[2] == "today" else False
    if call.data.split("_")[3] == "numerator":
        is_numerator = 1 
    elif call.data.split("_")[3] == "denominator":
        is_numerator = 0 
    else:
        is_numerator = -1

    schedule_text = get_schedule(url, group_id, is_numerator, today_only)
    
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if is_numerator == -1:
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    bot.send_message(call.message.chat.id, schedule_text, reply_markup=keyboard_numerator(is_numerator, group_id))

    bot.answer_callback_query(call.id)

@bot.message_handler(commands=["help"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n\nstart - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\nhelp - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–∏–º\nabout - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ",
        reply_markup=keyboard_commands,
    )


@bot.message_handler(commands=["about"])
def send_about(message):
    bot.send_message(message.chat.id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @K0tok")


@bot.message_handler(func=lambda message: True)
def echo_all(message: telebot.types.Message):
    if message.text in ["üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ù–¢–ò", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ù–¢–ò", "üìö"]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('week', message.chat.id ))
        return
    if message.text in ["üóìÔ∏è –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üóìÔ∏è"]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('week', message.chat.id ))
        return
    if message.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ"]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ–º–º–∞–Ω–¥—É. \n<i>–ü—Ä–∏–º–µ—Ä: /schedule –¢-143901-–ò–°–¢</i>", reply_markup=create_keyboard_groups('today', message.chat.id ))
        return
    

    
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    if message.text == "–ü–æ–∫–∞":
        bot.reply_to(
            message,
            f"–î–æ—Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}.\n–ë—É–¥—É —Å–∫—É—á–∞—Ç—å!",
        )


bot.infinity_polling()
